import {expect, test} from '@oclif/test'
import * as fs from 'fs-extra'
import * as  PluginHelp from '@oclif/plugin-help'
import {IConfig} from '@oclif/config'
import * as HelpPlugin from '../src/_test-help'
import {spy, createSandbox, SinonStub} from 'sinon'

const originalGetHelpPlugin = PluginHelp.getHelpPlugin
const readme = fs.readFileSync('README.md', 'utf8')

describe('readme', () => {
  afterEach(() => {
    // restore original file after each test
    fs.writeFile('README.md', readme)
  })

  test
  .stdout()
  .command(['readme'])
  .it('runs readme', () => {
    expect(fs.readFileSync('README.md', 'utf8')).to.contain('manifest')
  })

  test
  .stdout()
  .finally(() => fs.remove('docs'))
  .command(['readme', '--multi'])
  .it('runs readme --multi', () => {
    expect(fs.readFileSync('README.md', 'utf8')).to.contain('manifest')
  })

  describe('with help plugin', () => {
    test
    .stdout()
    .add('commandSpy', () => {
      return spy(HelpPlugin.default.prototype.getCommandHelpForReadme)
    })
    .stub(PluginHelp, 'getHelpPlugin', (config: IConfig) => {
      config.pjson.oclif.helpPlugin = './lib/_test-help'
      return originalGetHelpPlugin(config)
    })
    .finally(ctx => ctx.commandSpy.restore())
    .command(['readme'])
    .it('runs readme with help.getCommandHelpForReadmeSpy method', ({commandSpy}) => {
      expect(HelpPlugin.default.prototype.getCommandHelpForReadme).to.exist
      expect((HelpPlugin.default.prototype as any).command).to.not.exist
      expect(commandSpy.called).to.be.true
      expect(fs.readFileSync('README.md', 'utf8')).to.contain(`
## \`oclif-dev pack\`

packages oclif cli into tarballs

\`\`\`
Test help generated by test plugin for: pack
It has the following flags: root, targets, xz
\`\`\`

_See code: [src/commands/pack/index.ts](https://github.com/oclif/dev-cli/blob/v1.22.2/src/commands/pack/index.ts)_`)
    })
  })

  test
  .stdout()
  .add('sandbox', () => {
    const sb = createSandbox()
    const command: SinonStub = sb.stub().callsFake((command: any) => {
      return `${command.id} >> generated from  legacy .command call`
    })

    HelpPlugin.default.prototype.command = command
    const getCommandHelpForReadmeSpy = sb.stub(HelpPlugin.default.prototype, 'getCommandHelpForReadme').value(undefined)

    return {
      sb,
      command,
      getCommandHelpForReadmeSpy,
    }
  })
  .stub(PluginHelp, 'getHelpPlugin', (config: IConfig) => {
    config.pjson.oclif.helpPlugin = './lib/_test-help'
    return originalGetHelpPlugin(config)
  })
  .finally(ctx => {
    ctx.sandbox.sb.restore()
    delete HelpPlugin.default.prototype.command
  })
  .command(['readme'])
  .it('runs readme using deprecated help.command method for readme generation', ({sandbox}) => {
    expect((HelpPlugin.default.prototype as any).command).to.exist
    expect((HelpPlugin.default.prototype as any).getCommandHelpForReadme).to.not.exist
    expect(sandbox.command.called).to.be.true
    expect(sandbox.getCommandHelpForReadmeSpy.called).to.be.false
    expect(fs.readFileSync('README.md', 'utf8')).to.contain(`
## \`oclif-dev pack\`

packages oclif cli into tarballs

\`\`\`
pack >> generated from  legacy .command call
\`\`\`

_See code: [src/commands/pack/index.ts](https://github.com/oclif/dev-cli/blob/v1.22.2/src/commands/pack/index.ts)_`)
  })
})
